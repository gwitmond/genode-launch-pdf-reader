set build_components { app/pdf_view
		       app/fs_query
		       app/sequence
		       app/launch_pdf_reader
}

source ${genode_dir}/repos/base/run/platform_drv.inc

build $build_components

create_boot_directory

import_from_depot \
	[depot_user]/pkg/[drivers_interactive_pkg] \
	[depot_user]/pkg/motif_wm \
	[depot_user]/src/[base_src] \
	[depot_user]/src/init \
	[depot_user]/src/nitpicker \
	[depot_user]/src/coreutils \
	[depot_user]/src/bash \
	[depot_user]/src/init \
	[depot_user]/src/libc \
	[depot_user]/src/noux \
	[depot_user]/src/posix \
	[depot_user]/src/vfs \
	[depot_user]/src/vfs_import

set config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<service name="Nitpicker"> <child name="wm"/> </service>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>

	<start name="drivers" caps="1000">
		<resource name="RAM" quantum="32M" constrain_phys="yes"/>
		<binary name="init"/>
		<route>
			<service name="ROM" label="config"> <parent label="drivers.config"/> </service>
			<service name="Timer"> <child name="timer"/> </service>
			<any-service> <parent/> </any-service>
		</route>
		<provides>
			<service name="Input"/> <service name="Framebuffer"/>
		</provides>
	</start>

	<start name="nitpicker">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Nitpicker"/></provides>
		<config focus="rom">
			<domain name="pointer" layer="1" content="client" label="no" origin="pointer" />
			<domain name="default" layer="2" content="client" label="no" hover="always"/>
			<policy label_prefix="pointer" domain="pointer"/>
			<default-policy domain="default"/>
		</config>
	</start>

	<start name="pointer">
		<resource name="RAM" quantum="1M"/>
		<route>
			<service name="Nitpicker"> <child name="nitpicker"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="wm" caps="1000">
		<resource name="RAM" quantum="32M"/>
		<binary name="init"/>
		<provides> <service name="Nitpicker"/> </provides>
		<route>
			<service name="ROM" label="config"> <parent label="wm.config"/> </service>
			<service name="Nitpicker"> <child name="nitpicker"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>


	<!-- pdf_share is the filesystem where Linux writes pdf files to. -->
	<start name="pdf_share">
		<binary name="vfs"/>
		<resource name="RAM" quantum="16M"/>
		<provides> <service name="File_system"/> </provides>
		<config verbose="yes">
			<vfs>
				<ram />
			</vfs>
			<default-policy root="/" writeable="yes" />
		</config>
	</start>


	<!-- report_new_pdf reports to launch_pdf_reader when there is a new pdf -->
	<start name="report_new_pdf">
		<binary name="report_rom"/>
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="yes">
			<policy label="launch_pdf_reader -> report_new_pdf" report="fs_query -> listing" />
		</config>
	</start>


	<!-- fs_query monitors the pdf_share for new files and writes a report into report_new_pdf -->
	<start name="fs_query">
		<resource name="RAM" quantum="1M"/>
		<config verbose="yes">
			<vfs> <fs writeable="yes"/> </vfs>
			<query path="/" content="no"/>
		</config>
		<route>
			<service name="File_system"> <child name="pdf_share" /> </service>
			<service name="Report"> <child name="report_new_pdf" /> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>


	<!-- launch pdf_view when the report_new_pdf mentions there is a change in the fs -->
	<start name="launch_pdf_reader" caps="500">
	       <resource name="RAM" quantum="1G"/>
	       <config verbose="yes">
			<start name="pdf_view">
			       <config>
					<vfs>
						<dir name="dev"> <log/> </dir>
						<fs />
					</vfs>
					<libc stdout="/dev/log" stderr="/dev/log"/>
				</config>
			</start>
		</config>
		<route>
			<service name="ROM" label="report_new_pdf"> <child name="report_new_pdf" /> </service>
			<service name="ROM"> <parent/> </service>
			<service name="Nitpicker">   <child name="wm" /> </service>
			<service name="File_system"> <child name="pdf_share" /> </service>
			<any-service> <any-child/> <parent/> </any-service>
		</route>
	</start>


	<start name="test" caps="700">
		<binary name="sequence"/>
		<resource name="RAM" quantum="64M"/>
		<config>
			<start name="sleep" caps="500">
				<binary name="noux"/>
				<config stdin="/dev/null" stdout="/dev/log" stderr="/dev/log" verbose="yes">
					<fstab>
						<tar name="coreutils.tar" />
						<dir name="dev"> <log/> <null/> </dir>
					</fstab>
					<start name="/bin/sleep"> <arg value="10"/> </start>
				</config>
			</start>

			<start name="add" caps="500">
				<binary name="noux"/>
				<config stdin="/dev/null" stdout="/dev/log" stderr="/dev/log" verbose="yes" >
					<fstab>
						<tar name="coreutils.tar" />
						<dir name="dest"> <fs writeable="yes"/> </dir>
						<dir name="dev"> <log/> <null/> </dir>
						<dir name="source"> <rom name="test.pdf" /> </dir>
					</fstab>

					<start name="/bin/cp">
						<arg value="/source/test.pdf" />
						<!-- <arg value="/dev/null" /> -->
						<arg value="/dest/foo.pdf" />
					</start>
				</config>
			</start>
		</config>
	</start>
</config>
}

install_config $config

#
# Download test PDF file
#
if {![file exist bin/test.pdf]} {
	set pdf_url "http://genode-labs.com/publications/genode-fpga-graphics-2009.pdf"
	catch { exec wget $pdf_url -O bin/test.pdf }
}

if {![file exist bin/test.pdf]} {
	puts stderr "Could not download test PDF from '$pdf_url'"
	exit 1
}

#
# Pin the nitpicker focus to the window manager by providing a static focus ROM
#
set fd [open [run_dir]/genode/focus w]
puts $fd "<focus label=\"wm -> focus\"/>"
close $fd

append boot_modules {
	libc.lib.so vfs.lib.so libm.lib.so
	openjpeg.lib.so freetype.lib.so libpng.lib.so zlib.lib.so jbig2dec.lib.so
	mupdf.lib.so jpeg.lib.so
	fs_query
	sequence
	launch_pdf_reader
	pdf_view
	test.pdf
}

build_boot_image $boot_modules

append qemu_args " -m 1536 "

set env(SDL_VIDEO_X11_DGAMOUSE) 0

run_genode_until forever
